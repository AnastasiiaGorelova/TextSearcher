plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id "org.jetbrains.kotlin.plugin.spring" version "1.7.20"

    id "com.github.node-gradle.node" version "3.5.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

tasks.named('test') {
	useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

node {
    // Version of node to use.
    version = '16.18.0'

    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.projectDir}/src/main/frontend/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/src/main/frontend/myreactapp")
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn('npmSetup')
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn('npmInstallDependencies')
    execOverrides {
        it.workingDir = 'src/main/frontend'
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn('npmBuild')
    from "$projectDir/src/main/frontend/build/"
    into "$buildDir/resources/main/static"
}

processResources{
    dependsOn 'copyFrontendToBuild'
}
